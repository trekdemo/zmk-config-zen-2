/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
  chosen {
    // zmk,matrix_transform = &default_transform;
    zmk,matrix_transform = &five_column_transform;
  };
};

#define DEFAULT 0
#define EXT    1
#define SYM    2
#define NUM    3

// https://zmk.dev/docs/behaviors/hold-tap
/ {
    behaviors {
      hm: balanced_homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <180>;
        quick-tap-ms = <0>;
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
      };
      // For shift I do not want to chain the sticky key, I want it to bereleased
      // immediately
      // https://zmk.dev/docs/behaviors/sticky-key#example
      skq: sticky_key_quick_release {
        compatible = "zmk,behavior-sticky-key";
        label = "STICKY_KEY_QUICK_RELEASE";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <1000>;
        quick-release;
      };
    };

    keymap {
      compatible = "zmk,keymap";

      default_layer {
        label = "BASE";
        bindings = <
          &kp Q      &kp W       &kp F      &kp P        &kp B        &kp J   &kp L        &kp U      &kp Y        &kp SQT
          &hm LALT A &hm LCTRL R &hm LCMD S &hm LSHIFT T &kp G        &kp M   &hm RSHIFT N &hm RCMD E &hm RCTRL I  &hm RALT O
          &kp Z      &kp X       &kp C      &kp D        &kp V        &kp K   &kp H        &kp COMMA  &kp DOT      &kp FSLH
                              &lt NUM ESC &lt EXT BSPC &kp TAB        &kp RET &lt SYM SPC &kp LA(LC(LG(LSHIFT)))
        >;
      };

      ext_layer {
        label = "EXT";
        bindings = <
          &kp ESC   &kp LG(LBRC) &kp LG(LBKT) &kp LG(RBKT) &kp LG(RBRC)        &none    &kp C_PREV &kp C_PP  &kp C_NEXT &kp C_VOL_UP
          &kp LALT  &kp LCTL     &kp LCMD     &kp LSFT     &none               &kp LEFT &kp DOWN   &kp UP    &kp RIGHT  &kp C_VOL_DN
          &kp LG(Z) &kp LG(X)    &kp LG(C)    &none        &kp LG(V)           &kp HOME &kp PG_DN  &kp PG_UP &kp END    &kp C_MUTE
                                 &trans       &trans       &trans              &trans   &trans     &trans
        >;
      };

      sym_layer {
        label = "SYMBOL";
        bindings = <
          &kp ESC   &none  &none     &kp BSLH  &kp TILDE   &kp AMPS &kp LPAR &kp RPAR &kp PRCNT &kp EQUAL
          &kp EXCL  &kp AT &kp UNDER &kp COLON &kp DLLR    &kp PIPE &kp LBKT &kp RBKT &kp PLUS  &kp MINUS
          &kp CARET &none  &kp HASH  &kp SEMI  &kp GRAVE   &none    &kp LBRC &kp RBRC &kp ASTRK &kp SLASH
                           &trans    &trans    &trans      &trans   &trans   &trans
        >;
      };


      num_layer {
        label = "NUMBER";
        bindings = <
          &none     &bt BT_PRV &bt BT_NXT &none    &bt BT_CLR  &kp PRCNT &kp N7    &kp N8    &kp N9    &kp EQUAL
          &kp LALT  &kp LCTL   &kp LCMD   &kp LSFT &none       &kp PLUS  &kp N4    &kp N5    &kp N6    &kp MINUS
          &kp LG(Z) &kp LG(X)  &kp LG(C)  &none    &kp LG(V)   &kp ASTRK &kp N1    &kp N2    &kp N3    &kp SLASH
                               &trans     &trans   &trans      &kp RET   &kp N0    &kp DOT
        >;
      };
    };

    // ==[ Combos ]=====================================================
    // https://zmk.dev/docs/features/combos
    //
    // ╭-----------------------------╮   ╭-----------------------------╮
    // |     |  1  |  2  |     |     |   |     |     |  7  |  8  |     |
    // |-----------------x-----x-----|   |-----x-----x-----------------|
    // |     |     |     | 13  |     |   |     | 16  |     |     |     |
    // |-----------------x-----x-----|   |-----x-----x-----------------|
    // |     |  21 |  22 |     |     |   |     |     |  27 |  28 |     |
    // ╰-----------------------------╯   ╰-----------------------------╯
    //             ╭-----------------╮   ╭-----------------╮
    //             |     |     |     |   |     |     |     |
    //             ╰-----------------╯   ╰-----------------╯
    //
    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <100>; // These are keys on the two halves. It takes
                                // some practice to hit them in the same time.
            key-positions = <13 16>;
            bindings = <&caps_word>;
        };

        combo_shift {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&skq LSHIFT>;
        };
    };

};
